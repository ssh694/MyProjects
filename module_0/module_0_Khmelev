import numpy as np


def game_core_v3(number):
    '''Реализуем алгоритм двоичного поиска'''
    count = 0 #задаем количество попыток
    predict = np.random.randint(1,100) #генерируем загаданое число случайным образом
    list = [x for x in range(1,100,1)]
    mid = len(list) // 2 #определям значение элемента в середине структуры данных
    low = 0              #задаем левую границу диапазона
    high = len(list) - 1 #задаем правую границу диапазона
    while list[mid] != predict and low <= high: #цикл выполняется до тех пор пока искомое число не будет найдено
        count += 1
        if predict > list[mid]: #если загаданное число больше, чем элемент в середине структуры данных
            low = mid + 1       #работаем только с той половиной данных что больше среднего значения
        else:
            high = mid - 1      #если меньше, то с той половиной данных что меньше среднего значения
        mid = (low + high) // 2 #пересчитываем новое значение среднего значения
    return(count)


def score_game(game_core_v3):
    '''Запускаем игру 1000 раз, чтоб узнать как быстро игра угадывает число'''
    count_ls = []
    np.random.seed(1)  # фиксируем RANDOM SEED, чтобы ваш эксперимент был воспроизводим!
    random_array = np.random.randint(1, 101, size=(1000))
    for number in random_array:
        count_ls.append(game_core_v3(number))
    score = int(np.mean(count_ls))
    print(f"Ваш алгоритм угадывает число в среднем за {score} попыток")
    return(score)

score_game(game_core_v3)
